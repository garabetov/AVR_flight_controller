
flight_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002dc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800104  00800104  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ed  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000730  00000000  00000000  00000d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003aa  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000219f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 38       	cpi	r26, 0x8D	; 141
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer0_init>:
	while(*c) // it will be true, until the end of the string when it reaches the null terminator
	{
		// send each char of the string
		USART_write_char(*c++); // dereference and pass the char and then increment the ptr
	}
}
  a6:	14 bc       	out	0x24, r1	; 36
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	85 bd       	out	0x25, r24	; 37
  ae:	ee e6       	ldi	r30, 0x6E	; 110
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <USART0_init>:
  ba:	9c 01       	movw	r18, r24
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	60 e4       	ldi	r22, 0x40	; 64
  c2:	72 e4       	ldi	r23, 0x42	; 66
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 4a 01 	call	0x294	; 0x294 <__udivmodsi4>
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	31 09       	sbc	r19, r1
  d0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d8:	88 ed       	ldi	r24, 0xD8	; 216
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  de:	e2 ec       	ldi	r30, 0xC2	; 194
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	86 60       	ori	r24, 0x06	; 6
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <main>:
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	84 b9       	out	0x04, r24	; 4
  ee:	e1 e8       	ldi	r30, 0x81	; 129
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	80 83       	st	Z, r24
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
  fe:	83 e2       	ldi	r24, 0x23	; 35
 100:	94 ef       	ldi	r25, 0xF4	; 244
 102:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 106:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 10a:	ef e6       	ldi	r30, 0x6F	; 111
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	82 60       	ori	r24, 0x02	; 2
 112:	80 83       	st	Z, r24
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <timer0_init>
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	95 e2       	ldi	r25, 0x25	; 37
 11c:	0e 94 5d 00 	call	0xba	; 0xba <USART0_init>
 120:	78 94       	sei
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x38>

00000124 <__vector_16>:

////////////////// ISR//////////////

// increment var every 1024 us - used for millis() and micros()
ISR(TIMER0_OVF_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
	// copy volatiles to local variable to perform computations as working with volatile var require direct memory access each time (slower process)
	unsigned long timer0_ms_loc = timer0_ms;
 150:	c0 90 09 01 	lds	r12, 0x0109	; 0x800109 <timer0_ms>
 154:	d0 90 0a 01 	lds	r13, 0x010A	; 0x80010a <timer0_ms+0x1>
 158:	e0 90 0b 01 	lds	r14, 0x010B	; 0x80010b <timer0_ms+0x2>
 15c:	f0 90 0c 01 	lds	r15, 0x010C	; 0x80010c <timer0_ms+0x3>
	unsigned long timer0_ms_frac_loc = timer0_ms_frac;
 160:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <timer0_ms_frac>
 164:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <timer0_ms_frac+0x1>
 168:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <timer0_ms_frac+0x2>
 16c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <timer0_ms_frac+0x3>
	
	// every 1024 us this value is being incremented by 1
	timer0_ms_loc++;
 170:	b7 01       	movw	r22, r14
 172:	a6 01       	movw	r20, r12
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	6f 4f       	sbci	r22, 0xFF	; 255
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
	//store the remaining us to a fractional variable and increment by 24 on each interrupt
	timer0_ms_frac_loc += 24;
 17c:	d9 01       	movw	r26, r18
 17e:	c8 01       	movw	r24, r16
 180:	48 96       	adiw	r24, 0x18	; 24
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
	// when the fractional part exceeds 1000 a full ms have passed
	if (timer0_ms_frac_loc > 1000)
 186:	89 3e       	cpi	r24, 0xE9	; 233
 188:	e3 e0       	ldi	r30, 0x03	; 3
 18a:	9e 07       	cpc	r25, r30
 18c:	a1 05       	cpc	r26, r1
 18e:	b1 05       	cpc	r27, r1
 190:	60 f0       	brcs	.+24     	; 0x1aa <__vector_16+0x86>
	{
		// increment the ms variable again
		timer0_ms_loc++;
 192:	b7 01       	movw	r22, r14
 194:	a6 01       	movw	r20, r12
 196:	4e 5f       	subi	r20, 0xFE	; 254
 198:	5f 4f       	sbci	r21, 0xFF	; 255
 19a:	6f 4f       	sbci	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
		// store the leftover after 1000
		timer0_ms_frac_loc -= 1000;
 19e:	d9 01       	movw	r26, r18
 1a0:	c8 01       	movw	r24, r16
 1a2:	80 5d       	subi	r24, 0xD0	; 208
 1a4:	93 40       	sbci	r25, 0x03	; 3
 1a6:	a1 09       	sbc	r26, r1
 1a8:	b1 09       	sbc	r27, r1
	}
	
	// copy back to the volatile global
	timer0_ms = timer0_ms_loc;
 1aa:	40 93 09 01 	sts	0x0109, r20	; 0x800109 <timer0_ms>
 1ae:	50 93 0a 01 	sts	0x010A, r21	; 0x80010a <timer0_ms+0x1>
 1b2:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <timer0_ms+0x2>
 1b6:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <timer0_ms+0x3>
	timer0_ms_frac = timer0_ms_frac_loc;
 1ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_ms_frac>
 1be:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_ms_frac+0x1>
 1c2:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_ms_frac+0x2>
 1c6:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_ms_frac+0x3>

}
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_11>:


ISR(TIMER1_COMPA_vect)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
	// toggle LED every 1 sec
	PORTB_REG ^= (1<<PIN13);
 204:	95 b1       	in	r25, 0x05	; 5
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	89 27       	eor	r24, r25
 20a:	85 b9       	out	0x05, r24	; 5
}
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_20>:

// triggers when a byte is transmitted
ISR(USART_TX_vect) 
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	// if buffer is not empty then more data must be sent
	if(bufferTail != bufferHead)
 230:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 234:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bufferHead>
 23c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bufferHead+0x1>
 240:	e8 17       	cp	r30, r24
 242:	f9 07       	cpc	r31, r25
 244:	d1 f0       	breq	.+52     	; 0x27a <__vector_20+0x60>
	{
		// on finished byte transmission, the next tail must be loaded for transmission
		UDR0 = *bufferTail;
 246:	80 81       	ld	r24, Z
 248:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		bufferTail++;
 24c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 250:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 254:	9c 01       	movw	r18, r24
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 25e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
		
		// wrap around when reaching the end of buffer
		if (bufferTail >= bufferTail + BUFFER_SIZE)
 262:	8f 57       	subi	r24, 0x7F	; 127
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	28 17       	cp	r18, r24
 268:	39 07       	cpc	r19, r25
 26a:	48 f0       	brcs	.+18     	; 0x27e <__vector_20+0x64>
		{
			bufferTail = serialRingBuffer;  // Wrap around to the start address of the buffer (position 0 in array)
 26c:	8d e0       	ldi	r24, 0x0D	; 13
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 278:	02 c0       	rjmp	.+4      	; 0x27e <__vector_20+0x64>
		}
	} else 
	{
		// no more data to be sent as ring buffer is empty, new serial transmission can be re-strated with USART_write()
		tx_busy = 0;
 27a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}

}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__udivmodsi4>:
 294:	a1 e2       	ldi	r26, 0x21	; 33
 296:	1a 2e       	mov	r1, r26
 298:	aa 1b       	sub	r26, r26
 29a:	bb 1b       	sub	r27, r27
 29c:	fd 01       	movw	r30, r26
 29e:	0d c0       	rjmp	.+26     	; 0x2ba <__udivmodsi4_ep>

000002a0 <__udivmodsi4_loop>:
 2a0:	aa 1f       	adc	r26, r26
 2a2:	bb 1f       	adc	r27, r27
 2a4:	ee 1f       	adc	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	a2 17       	cp	r26, r18
 2aa:	b3 07       	cpc	r27, r19
 2ac:	e4 07       	cpc	r30, r20
 2ae:	f5 07       	cpc	r31, r21
 2b0:	20 f0       	brcs	.+8      	; 0x2ba <__udivmodsi4_ep>
 2b2:	a2 1b       	sub	r26, r18
 2b4:	b3 0b       	sbc	r27, r19
 2b6:	e4 0b       	sbc	r30, r20
 2b8:	f5 0b       	sbc	r31, r21

000002ba <__udivmodsi4_ep>:
 2ba:	66 1f       	adc	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	1a 94       	dec	r1
 2c4:	69 f7       	brne	.-38     	; 0x2a0 <__udivmodsi4_loop>
 2c6:	60 95       	com	r22
 2c8:	70 95       	com	r23
 2ca:	80 95       	com	r24
 2cc:	90 95       	com	r25
 2ce:	9b 01       	movw	r18, r22
 2d0:	ac 01       	movw	r20, r24
 2d2:	bd 01       	movw	r22, r26
 2d4:	cf 01       	movw	r24, r30
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
